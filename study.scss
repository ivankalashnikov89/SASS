//My SASS Journey

//React
//npm install sass --save -dev
//import ../scss/fileName.scss

//npm install -g sass
//npm i -g sass

//HTML
/*
    You should compile the scss first if you use 
    a text editor like VSCODE that is availablr plugin 
    called LIVE-SASS-COMPILER. You need to install
    that and click the WATCH SASS.
                                        */

//VARIABLES
/* In Sass, variables allow you to store and reuse 
values throughout your stylesheets. This can be 
especially helpful for maintaining a consistent 
design across your web project, as you can define 
values like colors, fonts, and sizes in one place 
and then use those variables wherever needed*/

//Defining Variables
/*In Sass, variables are defined using the $ symbol 
followed by the variable name and an assignment*/
$primary-color: #3498db;
$font-family: "Arial", sans-serif;
$base-font-size: 16px;

//Using Variables
/*ou can use variables by referencing them with 
the $ symbol wherever you would normally use a 
value in your styles*/
.header {
    background-color: $primary-color;
    font-family: $font-family;
    font-size: $base-font-size;
  }
/*This way, if you ever need to change the primary 
color or font family, you only have to update 
the variable value, and it will automatically 
reflect in all the places where the variable is used*/  

//Variable Scope
/*Sass variables have scope within the block where 
they are defined. If you define a variable within 
a nested block (like inside a selector or mixin), 
it will only be accessible within that block and its 
children*/
.section {
    $section-background: #f0f0f0;
  
    .content {
      background-color: $section-background; // Accessible here
    }
  }
  
  .footer {
    background-color: $section-background; // Error: $section-background is not defined here
  }

//Global Variables
/*To create global variables that are accessible 
throughout your entire stylesheet, define them outside 
of any selector or block*/
$global-variable: #999;

.element {
  color: $global-variable; // Accessible here
}

//Variable Interpolation
/*You can also interpolate variables within strings 
using #{$variable}:*/
$namespace: "my-app";

.#{$namespace}-button {
  background-color: $primary-color;
}


//MAPS
/*In Sass, maps are data structures that allow you 
to store key-value pairs, where each key is associated 
with a corresponding value. Sass maps are a powerful 
feature that can help you manage and organize data 
efficiently, making your stylesheets more maintainable 
and dynamic*/  

//Defining Sass Maps
/*You can define a Sass map using the () notation with 
key-value pairs separated by : and comma-separated pairs*/
$colors: (
  primary: #3498db,
  secondary: #e74c3c,
  success: #2ecc71,
);

//Accessing Values in Sass Maps
/*You can access values in a Sass map using the 
map-get() function and providing the map and the 
key as arguments:*/
.button-primary {
    background-color: map-get($colors, primary);
  }

//Iterating Over Sass Maps
/*You can loop through the keys and values of a 
Sass map using the map-keys() and map-values() functions*/
@each $key in map-keys($colors) {
    .#{$key}-button {
      background-color: map-get($colors, $key);
    }
  }

//Modifying Sass Maps
/*While Sass maps are immutable, you can create new maps 
by combining or modifying existing ones using functions 
like map-merge()*/
$newColors: map-merge($colors, (info: #3498db));

//Nesting Sass Maps
$theme: (
  colors: (
    primary: #3498db,
    secondary: #e74c3c,
  ),
  fonts: (
    heading: "Arial", sans-serif,
    body: "Helvetica", sans-serif,
  ),
);

.header {
  font-family: map-get(map-get($theme, fonts), heading);
  background-color: map-get(map-get($theme, colors), primary);
}



//NESTING
/*In Sass, nesting is a feature that allows you 
to write nested selectors and properties within 
other selectors. This feature can make your Sass 
code more organized and easier to read, as it 
reflects the hierarchical structure of your HTML 
or component markup*/

//Basic Nesting
/*In Sass, you can nest selectors and properties 
within other selectors. This is similar to how HTML 
elements are nested in your markup.*/
.container {
    width: 100%;
  
    .header {
      background-color: #3498db;
      color: #ffffff;
    }
  
    .content {
      padding: 20px;
    }
  }

//Combining Selectors
/*You can combine selectors within a single 
nesting block. This is useful when you want 
to apply styles to elements that share multiple 
classes*/
.button, .link {
    color: #3498db;
  
    &:hover {
      text-decoration: underline;
    }
  }

//Pseudo-selectors and Pseudo-classes
/*ou can use nesting to define pseudo-selectors 
and pseudo-classes within a selector block*/
.button {
    &:hover {
      background-color: #3498db;
    }
  
    &::before {
      content: "\f101";
      font-family: FontAwesome;
    }
  }

//Nesting Media Queries
/*You can also nest media queries to keep 
responsive styles organized.*/
.container {
    width: 100%;
  
    @media screen and (max-width: 768px) {
      width: 90%;
    }
  }

//Nesting Combinatin with Variables
/*Nesting works well with Sass variables. 
You can use variables to store values and 
apply them within nested selectors*/
$primary-color: #3498db;

.button {
  background-color: $primary-color;

  &:hover {
    background-color: darken($primary-color, 10%);
  }
}



//PARTIALS
/*
   When our project is large we can use separate 
    .scss files (partials).
   The name of partials should start with 
   underscore: _name.scss
   Then we should impoer this file(partial) in
   main.scss: 
            @import "._name";
                                        */

//Create a Partial:
// _variables.scss
$primary-color: #3498db;
$font-family: "Arial", sans-serif;

//Import a Partial
// main.scss
@import 'variables';

.header {
  background-color: $primary-color;
  font-family: $font-family;
}



//FUNCTIONS
/*
    Sass (Syntactically Awesome Style Sheets) is a 
    preprocessor scripting language that is used to 
    extend the capabilities of CSS (Cascading Style 
    Sheets). One of the powerful features of Sass is 
    its ability to define and use functions. Sass 
    functions allow you to encapsulate logic and 
    calculations within your stylesheets, making it 
    easier to maintain and reuse code
                                            */

//Defining a Functiom 
/*You can define a Sass function using the @function 
directive. Here's a basic example of a Sass function 
that calculates the sum of two numbers:*/
@function add($a, $b) {
    @return $a + $b;
  }
  
//Using a Function
$result : add(5, 3); // $result will be 8
//$result = add(5, 3); // $result will be 8

//Returning Values
/*Inside a Sass function, you use the @return directive 
to specify the value that the function should return. 
In the example above, the add function returns the sum 
of its two arguments.*/

//Parameters
/*Functions can take one or more parameters. In the add 
function example, it takes two parameters, $a and $b. 
You can use these parameters within the function to 
perform calculations.*/





//MIXINS
/*Sass mixins are a powerful feature that 
allows you to define reusable blocks of CSS 
code that can be included in your stylesheets. 
They are similar to functions in other programming 
languages, as they accept parameters, perform 
actions, and can be called multiple times with 
different arguments. Mixins are particularly 
useful for applying consistent styling and avoiding 
code duplication*/

//Defining Mixins
/*To define a mixin in Sass, you use the @mixin 
directive followed by the mixin's name and a set 
of parameters enclosed in parentheses. Inside 
the mixin block, you write the CSS code that you 
want to reuse*/
@mixin button($background, $color) {
    background-color: $background;
    color: $color;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
  }

//Including Mixins
/*To use a mixin in your Sass code, you use the @include 
directive followed by the mixin's name and the values 
for its parameters*/
.primary-button {
    @include button(#3498db, #ffffff);
  }



//EXTEND
/*
    In Sass, the @extend directive is used to share 
    styles between selectors by extending one selector 
    with the styles of another. This allows you to keep 
    your CSS DRY (Don't Repeat Yourself) by reusing 
    styles for multiple selectors without duplicating 
    code.                                
                                        */

//Defining Placeholder Selectors
/*To use @extend, you first define a placeholder selector 
(also known as a silent selector) using the % symbol 
followed by the selector name. Placeholder selectors are 
not compiled to CSS unless they are extended. They serve 
as templates for sharing styles.*/
%base-button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
  }

//Extending selectors
/*To apply the styles defined in a placeholder selector 
to another selector, you use the @extend directive 
followed by the placeholder selector.*/
.primary-button {
    @extend %base-button;
    background-color: #3498db;
    color: #ffffff;
  }
  
  .secondary-button {
    @extend %base-button;
    background-color: #e74c3c;
    color: #ffffff;
  }

//Nesting Selectors
/*You can also nest @extend directives within a selector, 
allowing you to extend multiple placeholder selectors in 
one rule*/
.special-button {
    @extend %base-button;
    @extend %another-placeholder;
    background-color: #FFA500;
  }

//Chaining Selectors
/*You can chain @extend directives together in a single 
rule to extend multiple selectors with the same styles.*/
.primary-button {
    @extend %button-base;
    @extend %button-hover;
  }

//Media Queries and Extends
%responsive-button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
  }
  
  @media screen and (max-width: 768px) {
    .mobile-button {
      @extend %responsive-button;
      font-size: 14px;
    }
  }

//Extending Multiple Selectors
.primary-button, .info-button {
    @extend %base-button;
    background-color: #3498db;
    color: #ffffff;
  }
  